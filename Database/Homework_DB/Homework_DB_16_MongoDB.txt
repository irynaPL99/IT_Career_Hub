HW 16, Mongo DB:

# 1. Найдите средний возраст из коллекции ich.US_Adult_Income

db.getCollection('US_Adult_Income').aggregate(
  [
    {
      $group: {
        _id: null,
        avg_age: { $avg: '$age' }
      }
    }
  ],
  { maxTimeMS: 60000, allowDiskUse: true }
);

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 2.Поменяв подключение к базе данных, создать коллекцию orders_NAME (для уникальности - добавим ваше имя в название) со свойствами id, customer, product, amount, city, используя следующие данные:


db.orders_Platonova.insertMany([
  {id:1,customer:"Olga", product:"Apple", amount:15.55, city:"Berlin"},

  {id:2,customer:"Anna", product:"Apple", amount:10.05, city:"Madrid"},

  {id:3,customer:"Olga", product:"Kiwi", amount:9.6, city:"Berlin"},

  {id:4,customer:"Anton",product:"Apple", amount:20, city:"Roma"},

  {id:5,customer:"Olga",product:"Banana", amount:8, city:"Madrid"},

  {id:6,customer:"Petr",product:"Orange", amount:18.3, city:"Paris"
}
])


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 3.Найти сколько всего было совершено покупок
# variant 1:
db.orders_Platonova.countDocuments()

# variant 2:
db.orders_Platonova.find().count()

#variant 3:
db.getCollection('orders_Platonova').aggregate(
  [{ $count: 'total:' }],
  { maxTimeMS: 60000, allowDiskUse: true }
);




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 4.Найти сколько всего раз были куплены яблоки
db.getCollection('orders_Platonova').aggregate(
  [
    { $match: { product: 'Apple' } },
    { $count: 'total' }
  ],
  { maxTimeMS: 60000, allowDiskUse: true }
);

#variant 2
db.orders_Platonova.countDocuments({product: 'Apple'})

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#5 Вывести идентификаторы трех самые дорогих покупок

db.getCollection('orders_Platonova')
  .find({}, { id: 1, _id: 0 })
  .sort({ amount: -1 })
  .limit(3);


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><
#6 Найти сколько всего покупок было совершено в Берлине
db.getCollection('orders_Platonova').aggregate(
  [
    { $match: { city: 'Berlin' } },
    { $count: 'total' }
  ],
  { maxTimeMS: 60000, allowDiskUse: true }
);


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><
#7 Найти количество покупок яблок в городах Берлин и Мадрид

db.getCollection('orders_Platonova').aggregate(
  [
    {
      $match: {
        city: { $in: ['Madrid', 'Berlin'] }
      }
    },
    { $match: { product: 'Apple' } },
    { $count: 'total:' }
  ],
  { maxTimeMS: 60000, allowDiskUse: true }
);

>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
#8 Найти сколько было потрачено каждым покупателем

(подсказка: используем $group и total: {$sum: '$amount'} )

db.getCollection('orders_Platonova').aggregate(
  [
    {
      $group: {
        _id: '$customer',
        total: { $sum: '$amount' }
      }
    }
  ],
  { maxTimeMS: 60000, allowDiskUse: true }
);


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#9 Найти в каких городах совершала покупки Ольга

(подсказка: используем $match customer: 'Olga' и $group _id: '$city')

db.getCollection('orders_Platonova').aggregate(
  [
    { $match: { customer: 'Olga' } },
    {
      $group: {
        _id: '$city',
        total_city: { $sum: 1 }
      }
    }
  ],
  { maxTimeMS: 60000, allowDiskUse: true }
);


